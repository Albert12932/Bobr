package config

import (
	"context"
	"fmt"
	"log"
	"os"
	"time"

	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/joho/godotenv"
)

func ConnectDB() (*pgxpool.Pool, error) {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º .env (–µ—Å–ª–∏ –µ—Å—Ç—å)
	if err := godotenv.Load(); err != nil {
		log.Println("‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
	}

	host := os.Getenv("DB_HOST")
	port := os.Getenv("DB_PORT")
	user := os.Getenv("DB_USER")
	password := os.Getenv("DB_PASSWORD")
	dbname := os.Getenv("DB_NAME")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω—ã
	if host == "" || port == "" || user == "" || password == "" || dbname == "" {
		return nil, fmt.Errorf("–Ω–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: DB_HOST=%q, DB_PORT=%q, DB_USER=%q, DB_NAME=%q",
			host, port, user, dbname)
	}

	dsn := fmt.Sprintf("postgres://%s:%s@%s:%s/%s?sslmode=disable",
		user, password, host, port, dbname,
	)

	// –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–æ 15 —Ä–∞–∑ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 1 —Å–µ–∫—É–Ω–¥–∞
	maxRetries := 15
	for i := 1; i <= maxRetries; i++ {
		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		pool, err := pgxpool.New(ctx, dsn)
		cancel() // –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ä–∞–∑—É

		if err != nil {
			log.Printf("üîÅ –ü–æ–ø—ã—Ç–∫–∞ %d/%d: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞: %v", i, maxRetries, err)
			time.Sleep(1 * time.Second)
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
		ctx, cancel = context.WithTimeout(context.Background(), 2*time.Second)
		err = pool.Ping(ctx)
		cancel()

		if err == nil {
			log.Println("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
			return pool, nil
		}

		log.Printf("üîÅ –ü–æ–ø—ã—Ç–∫–∞ %d/%d: ping –Ω–µ —É–¥–∞–ª—Å—è: %v", i, maxRetries, err)
		pool.Close() // –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
		time.Sleep(1 * time.Second)
	}

	return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫", maxRetries)
}
